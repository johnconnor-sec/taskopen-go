// Demo application showcasing EPOCH 2 interactive features
package main

import (
	"fmt"
	"os"

	"github.com/johnconnor-sec/taskopen-go/taskopen/internal/output"
	"github.com/johnconnor-sec/taskopen-go/taskopen/internal/search"
	"github.com/johnconnor-sec/taskopen-go/taskopen/internal/ui"
)

func main() {
	formatter := output.NewFormatter(os.Stdout)

	formatter.Header("Taskopen EPOCH 2 Demo")
	formatter.Success("Interactive UI System Ready!")

	fmt.Println()

	// Demo 1: Fuzzy Search
	demoFuzzySearch(formatter)

	fmt.Println()

	// Demo 2: Interactive Menu
	demoInteractiveMenu(formatter)

	fmt.Println()

	// Demo 3: Action Preview
	demoActionPreview(formatter)
}

func demoFuzzySearch(formatter *output.Formatter) {
	formatter.Subheader("Demo 1: Fuzzy Search Engine")

	fuzzy := search.NewFuzzy()

	// Sample actions
	actions := []string{
		"edit file with vim",
		"open browser firefox",
		"view log files",
		"edit configuration",
		"browse directory",
		"view task details",
		"edit task annotations",
	}

	// Test various search queries
	queries := []string{"edit", "view", "firefox", "task"}

	for _, query := range queries {
		matches := fuzzy.Search(query, actions)

		formatter.Info("Search: '%s'", query)
		for i, match := range matches {
			if i >= 3 { // Show top 3 results
				break
			}

			highlighted := fuzzy.HighlightString(match.Text, match.Highlights, "[", "]")
			fmt.Printf("  %.2f - %s\n", match.Score, highlighted)
		}
		fmt.Println()
	}
}

func demoInteractiveMenu(formatter *output.Formatter) {
	formatter.Subheader("Demo 2: Interactive Menu System")

	// Create sample menu items
	items := []ui.MenuItem{
		{
			ID:          "edit",
			Text:        "Edit file",
			Description: "Open file in default editor",
			Action:      func() error { fmt.Println("Would edit file"); return nil },
		},
		{
			ID:          "browse",
			Text:        "Open browser",
			Description: "Launch web browser",
			Action:      func() error { fmt.Println("Would open browser"); return nil },
		},
		{
			ID:          "view",
			Text:        "View logs",
			Description: "Display log files",
			Action:      func() error { fmt.Println("Would view logs"); return nil },
		},
		{
			ID:          "config",
			Text:        "Edit configuration",
			Description: "Modify taskopen settings",
			Disabled:    true, // Example of disabled item
		},
	}

	// Show simple menu (non-interactive for demo)
	formatter.Info("Available actions:")

	for i, item := range items {
		status := "✓"
		if item.Disabled {
			status = "✗"
		}

		fmt.Printf("  %s %d. %s - %s\n", status, i+1, item.Text, item.Description)
	}

	fmt.Println()
	formatter.Info("In interactive mode, you would:")
	formatter.List("Use ↑/↓ to navigate")
	formatter.List("Type to search/filter items")
	formatter.List("Press Enter to select")
	formatter.List("Press Esc to cancel")
}

func demoActionPreview(formatter *output.Formatter) {
	formatter.Subheader("Demo 3: Action Preview System")

	// Simulate taskwarrior tasks
	tasks := []map[string]interface{}{
		{
			"id":          1,
			"description": "Review pull request #123",
			"status":      "pending",
			"project":     "development",
			"tags":        []string{"review", "urgent"},
		},
		{
			"id":          2,
			"description": "Update documentation",
			"status":      "pending",
			"project":     "documentation",
			"tags":        []string{"docs", "maintenance"},
		},
	}

	// Create task menu items
	taskItems := ui.CreateTaskMenu(tasks)

	formatter.Info("Task Preview Example:")

	for _, item := range taskItems {
		fmt.Printf("Task: %s\n", item.Text)
		fmt.Printf("  %s\n", item.Description)

		// Show what the preview would contain
		if task, ok := item.Data.(map[string]interface{}); ok {
			if project, exists := task["project"].(string); exists {
				fmt.Printf("  Project: %s\n", project)
			}
			if tags, exists := task["tags"].([]string); exists && len(tags) > 0 {
				fmt.Printf("  Tags: %v\n", tags)
			}
		}
		fmt.Println()
	}

	// Demo actions menu
	actions := map[string]interface{}{
		"vim":     "/usr/bin/vim",
		"firefox": "/usr/bin/firefox",
		"less":    "/usr/bin/less",
	}

	actionItems := ui.CreateActionsMenu(actions)

	formatter.Info("Action Preview Example:")

	for _, item := range actionItems {
		fmt.Printf("Action: %s\n", item.Text)
		fmt.Printf("  %s\n", item.Description)
		if cmd, ok := item.Data.(string); ok {
			fmt.Printf("  Command: %s\n", cmd)
		}
		fmt.Println()
	}
}
