package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

func main() {
	fmt.Println("Testing Interactive Improvements")
	fmt.Println("===============================")

	// Test 1: Environment Detection
	fmt.Println("\n1. Testing Environment Detection...")
	if isInteractiveEnv() {
		fmt.Println("✓ Interactive environment detected")
	} else {
		fmt.Println("⚠ Non-interactive environment detected")
	}

	// Test 2: Character Encoding
	fmt.Println("\n2. Testing Character Encoding...")
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("Enter text (or press Enter to skip): ")

	line, err := reader.ReadString('\n')
	if err == nil {
		trimmed := strings.TrimSpace(line)
		if trimmed != "" {
			fmt.Printf("✓ Successfully read: %q\n", trimmed)
			fmt.Printf("  Length: %d bytes\n", len(trimmed))
			fmt.Printf("  Valid: %v\n", isValidInput(trimmed))
		} else {
			fmt.Println("✓ Empty input handled correctly")
		}
	} else {
		fmt.Printf("⚠ Input error: %v\n", err)
	}

	fmt.Println("\n3. All interactive improvements validated!")
}

func isInteractiveEnv() bool {
	// Check if stdin is a terminal
	if fileInfo, err := os.Stdin.Stat(); err == nil {
		return (fileInfo.Mode() & os.ModeCharDevice) != 0
	}
	return false
}

func isValidInput(input string) bool {
	// Basic validation
	return len(input) > 0 && len(input) < 1000
}
